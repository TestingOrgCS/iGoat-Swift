name: Dependency check Scan - SCA
on:
  workflow_call:
  workflow_dispatch:
  push:
  
jobs:

  retrieve_depcheckID:
   runs-on: ubuntu-latest
   steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
    # Cache for Dependency Check Data
      - name: Cache Dependency Check Data
        uses: actions/cache@v4
        with:
          path: dc/dependency-check/data
          key: dependency-check-data-${{ runner.os }}
          restore-keys: |
            dependency-check-data-

    # Cache for Dependency Check CLI
      - name: Cache Dependency Check CLI
        uses: actions/cache@v4
        with:
          path: dc/dependency-check
          key: dependency-check-cli-9.0.9
          restore-keys: |
            dependency-check-cli-
      - name: install depcheck cli
        run: |
          mkdir dc
          wget -P dc https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.9/dependency-check-9.0.9-release.zip
          ls
          unzip dc/dependency-check-9.0.9-release.zip -d dc
          bash ./dc/dependency-check/bin/dependency-check.sh --enableExperimental --enableRetired --nvdApiKey $NVD_API_KEY -s . -f HTML -o reports
          ls -lah
          ls -lah reports
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}

      - name: Upload results - SCA
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports
      - name: run dojo POST
        if: (false)
        run: |
          curl -s https://raw.githubusercontent.com/Tech-it-or-live-it-Secure-CICD/centralWorkflows/main/engagementIDs.json > test.json
          export "ID=$(jq '."${{ github.repository }}".${{ github.ref_name }}.depcheckID' test.json)" >> GITHUB_ENV
          echo "$ID test"
          echo -n '${{ secrets.DOJO_TOKEN }}' | base64
          echo -n "curl -X POST "https://dojo.cloud.qweqwe/api/v2/import-scan/" -H "Authorization: Token $DOJO_TOKEN" " | base64
          curl -X POST "https://dojo.cloud.qweqwe/api/v2/import-scan/" \
                            -H "Authorization: Token $DOJO_TOKEN" \
                            -F "engagement=$ID" \
                            -F "active=true" \
                            -F "scan_type=Gitleaks Scan" \
                            -F "minimum_severity=Info" \
                            -F "skip_duplicates=true" \
                            -F "close_old_findings=true" \
                            -F "file=/src/gitleaks-report.json" 
        env:
         DOJO_TOKEN: ${{ secrets.DOJO_TOKEN }}
